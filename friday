#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Servo.h>
#include <AccelStepper.h>
#include <MultiStepper.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2);

AccelStepper stepper(AccelStepper::FULL4WIRE, 8, 9, 10, 11);

//cup
const int CupservoPin1 = 22;
const int CupservoPin2 = 23;
int CupIRsensor1 = 2;

Servo cupservo1;
Servo cupservo2;

const int openPosition2 = 90;
const int openPosition3 = 90;

// trab
const int servoTrabpin = 7;
int TrabIRsensor2 = 3;              // for the traaab position
Servo servoTrab;
const int openTrab = 180;   // Open position for servo3 in degrees

// Seeds
// const int servoSeedpin1 = 24; //corn
const int servoSeedpin2 = 25; // lentleis
int SeedsIRsensor3 = 4;              // for the seeeeds position
Servo servoSeed1;
Servo servoSeed2;
const int openSeed1 = 30;   // Open position for servo3 in degrees
const int openSeed2 = 30;   // Open position for servo3 in degrees


//watering
const int WaterPumpPin = 27; // Pin for controlling the water pump
const int IRSensorPin = 5;   // Pin connected to the water IR sensor



const byte ROWS = 1;
const byte COLS = 5;
char keys[ROWS][COLS] = {
  {'1', '2', '3', '4', '5'}
};
byte rowPins[ROWS] = {53};
byte colPins[COLS] = {51, 49, 47, 45, 43};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

bool chooseCups = false;
bool chooseSeeds = false;
int numberOfCups = 1;
int seedOption = 0;

enum State {
  STATE_IDLE,
  CHOOSING_CUPS,
  CHOOSING_SEEDS,
  DISPENSING_CUP,
  DISPENSING_Trab,
  DISPENSING_SEEDS,
  DISPENSING_TRAB2,
  WATERING
};

State currentState = STATE_IDLE;
int selectedCups = 0;
int selectedSeeds = 0;

void setup() {
    Serial.begin(9600);
    cupservo1.attach(CupservoPin1);
    cupservo2.attach(CupservoPin2);
    servoTrab.attach(servoTrabpin);
    // servoSeed1.attach(servoSeedpin1);
    servoSeed2.attach(servoSeedpin2);
    
   // Set initial positions of the servos
    cupservo1.write(0);
    cupservo2.write(0);
    servoTrab.write(0);
    servoSeed1.write(0);
    servoSeed2.write(0);

    stepper.setMaxSpeed(10);
    stepper.setAcceleration(100);
    stepper.setCurrentPosition(0);
    pinMode(CupIRsensor1, INPUT);
    pinMode(TrabIRsensor2, INPUT);    // initialize sensor2 as an input
    pinMode(SeedsIRsensor3, INPUT);    // initialize sensor2 as an input


pinMode(WaterPumpPin, OUTPUT);
digitalWrite(WaterPumpPin, LOW); // Initialize the water pump as off
pinMode(IRSensorPin, INPUT);

    
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("Choose # of cups");

    
}

void loop() {

    char key = keypad.getKey();

switch (currentState) {
        case STATE_IDLE:
            if (!chooseCups && !chooseSeeds && key == '5') {
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print("Select cups:");
                lcd.setCursor(0, 1);
                lcd.print(numberOfCups);
                lcd.print("  Inc  Dec");
                chooseCups = true;
            } else if (chooseCups && !chooseSeeds && key) {
                switch (key) {
                    case '1':
                        lcd.clear();
                        lcd.print("Brewing ");
                        lcd.print(numberOfCups);
                        lcd.print(" cups");
                        delay(2000);
                        lcd.clear();
                        lcd.setCursor(0, 0);
                        lcd.print("Choose type of seeds");
                        lcd.setCursor(0, 1);
                        lcd.print("Corn, Lentils");
                        chooseSeeds = true;
                        break;
                    case '2': //DEC
                        if (numberOfCups > 1) {
                            numberOfCups--;
                            lcd.setCursor(0, 1);
                            lcd.print("   ");
                            lcd.setCursor(0, 1);
                            lcd.print(numberOfCups);
                        }
                        break;
                    case '3': //INC
                        if (numberOfCups < 4) {
                            numberOfCups++;
                            lcd.setCursor(0, 1);
                            lcd.print("   ");
                            lcd.setCursor(0, 1);
                            lcd.print(numberOfCups);
                        }
                        break;
                    case '4':
                        Serial.println("Transitioning to CHOOSING_SEEDS state");
                       // currentState = CHOOSING_SEEDS;
                        break;
                }
            } else if (chooseSeeds && key) {
                switch (key) {
                    case '1':
                        lcd.clear();
                        lcd.print("Selected Corn");
                        selectedSeeds = 1;
                        delay(2000);
                        lcd.clear();
                        lcd.setCursor(0, 0);
                        lcd.print("You chose:");
                        lcd.setCursor(0, 1);
                        lcd.print(numberOfCups);
                        lcd.print(" cups of Corn");
                        chooseSeeds = false;
                        currentState = DISPENSING_CUP;

                        break;
                    case '2':
                        lcd.clear();
                        lcd.print("Selected Lentils");
                        selectedSeeds = 2;
                        delay(2000);
                        lcd.clear();
                        lcd.setCursor(0, 0);
                        lcd.print("You chose:");
                        lcd.setCursor(0, 1);
                        lcd.print(numberOfCups);
                        lcd.print(" cups of Lentils"); 
                       chooseSeeds = false;
                        currentState = DISPENSING_CUP;
                        break;
                            
                    default:
                        // Print an error message for unrecognized keys or do nothing
                        break;
                }
            }
                   break;

////////////////////  should increase delay to rach the positions ///////////////////////////////////
   case DISPENSING_CUP:
            lcd.clear();
            lcd.print("Dispensing cup...");
            delay(1000);
            dispenseCup();
            delay(6000);         ///////////////////////////////////////////////////////    
            currentState = DISPENSING_Trab;
            selectedCups++;
            break;


    case DISPENSING_Trab:
            lcd.clear();
            lcd.print("Dispensing Soil...");
            delay(1000);    
            dispenseTrab();
            delay(2000);
            StepperMoving(90); // Rotate the stepper motor continuously    
            delay(6000);
               
            currentState = DISPENSING_SEEDS;
                     
        break;
          
    case DISPENSING_SEEDS:
            lcd.clear();
            lcd.print("Dispensing seeds...");
            delay(2000);
            if ((digitalRead(SeedsIRsensor3) == LOW)) {
              if(selectedSeeds == 2|| selectedSeeds == 1 )
                dispenseLentils();
                // dispenseCorn();
            }
             currentState = DISPENSING_TRAB2;                
                delay(6000);
                break;

     case DISPENSING_TRAB2:    
          lcd.clear();
          lcd.print("Soil Again...");                
           delay(1000);
          
          StepperMovingReverse(90); // Rotate the stepper motor continuously  to reach the trab position again
           dispenseTrab();  
          ///////// 
           delay(6000);
           
         currentState = WATERING ;
          break;
          
          
      case WATERING:
      lcd.clear();
      lcd.print("Watering...");

      // go to watering position
      StepperMoving(180); // Rotate the stepper motor continuously       
      delay(8000);

      if (digitalRead(IRSensorPin) == LOW) {
          // Turn on the water pump
          digitalWrite(WaterPumpPin, HIGH);
          Serial.println("Water pump turned on.");
          // Wait for a certain duration (adjust as needed)
          } else {
          // Turn off the water pump if the IR sensor is HIGH (no object detected)
          digitalWrite(WaterPumpPin, LOW);
          Serial.println("Water pump turned off.");
      }
      
      delay(1000);

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Dispensed:");
      lcd.setCursor(0, 1);
      lcd.print(selectedCups);
      lcd.print(" cups of ");
      lcd.print(selectedSeeds == 1 ? "Corn" : "Lentils");

      if (selectedCups >= numberOfCups) {
          currentState = STATE_IDLE;
          selectedCups = 0;
      } else {
          currentState = DISPENSING_CUP;
      }
      break;
    
                
    }
}

void dispenseCup() {
    cupservo1.write(openPosition2);
    cupservo2.write(openPosition3);
    delay(3000);

    if (digitalRead(CupIRsensor1) == LOW) {
        StepperMoving(90);  // rotate untill reach the trab position
        cupservo1.write(0);
        cupservo2.write(0);
    }
    else{
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Error, no cups");
    }
    
    
}

void dispenseTrab() {
// open trab servo when the cup is under it, detected by TrabIRsensor
 if (digitalRead(TrabIRsensor2) == LOW) {
      servoTrab.write(openTrab);
        delay(4000);
        servoTrab.write(0);
        delay(1000);
 }
}

void dispenseCorn() {    
    servoSeed1.write(openSeed2);
    delay(3000);
    servoSeed1.write(0); 
    delay(3000);  
    StepperMoving(90); // Rotate the stepper motor continuously
}

void dispenseLentils() {
    servoSeed2.write(openSeed1);
    delay(3000);
    servoSeed2.write(0); 
    delay(3000);
    StepperMoving(90); // Rotate the stepper motor continuously
}

void StepperMoving(float angle) {
    int steps = angle / 1.8; // Convert angle to steps using 1.8 degrees per step
    stepper.moveTo(steps); // Move the motor by the calculated number of steps
    while (stepper.distanceToGo() != 0) {
        stepper.run();
    }
    stepper.stop();
}

void StepperMovingReverse(float angle) {
    int steps = -angle / 1.8; // Invert the direction for reverse movement
    stepper.moveTo(steps);
    while (stepper.distanceToGo() != 0) {
        stepper.run();
    }
    stepper.stop();
}


// void StepperMoving(int angle) {
//     stepper.setSpeed(20);
//     int targetPosition = stepper.currentPosition() + angle;
//     stepper.moveTo(targetPosition);
//     while (stepper.distanceToGo() != 0) {
//         stepper.run();
//     }
//     stepper.stop();
// }

// void StepperMovingReverse(int angle) {
//     stepper.setSpeed(20);
//     int targetPosition = stepper.currentPosition() - angle; // Subtract angle for reverse rotation
//     Serial.print("Target Position: ");
//     Serial.println(targetPosition);
//     stepper.moveTo(targetPosition);
    
//     while (stepper.distanceToGo() != 0) {
//         stepper.run();
//         Serial.print("Distance to Go: ");
//         Serial.println(stepper.distanceToGo());
//     }
    
//     stepper.stop();
//     Serial.println("Stepper Stopped");
// }


